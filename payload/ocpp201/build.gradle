import com.fasterxml.jackson.databind.JsonNode
import com.sun.codemodel.JClassContainer
import com.sun.codemodel.JType
import org.jsonschema2pojo.gradle.JsonSchemaPlugin
import org.jsonschema2pojo.rules.RuleFactory

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'java-library'
    id "maven-publish"
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.1.5"
}

apply plugin: 'java'
sourceCompatibility = 17
targetCompatibility = 17

plugins.withType(JsonSchemaPlugin).whenPluginAdded {
    jsonSchema2Pojo {
        generateBuilders = true
        initializeCollections = false
        useBigDecimals = true
        includeJsr303Annotations = true
        includeHashcodeAndEquals = true
        targetVersion = sourceCompatibility
        customRuleFactory = OcppGeneratorRuleFactory.class
        dateTimeType = 'java.time.ZonedDateTime'
    }
}

class OcppGeneratorRuleFactory extends RuleFactory {
    @Override
    org.jsonschema2pojo.rules.Rule<JClassContainer, JType> getTypeRule() {
        { nodeName, node, parent, jClassContainer, schema ->
            JType type = super.getTypeRule().apply(nodeName, node, parent, jClassContainer, schema)
            JsonNode maxLength = node.get('maxLength')

            type.fullName() == (String.class.getName()) && maxLength != null ?
                    type.owner().ref('com.evbox.everon.ocpp.common.CiString.' + (nodeName.toLowerCase().endsWith('idtag') ? 'IdToken' : 'CiString' + maxLength.asInt())) :
                    type
        }
    }

    // revert to legacy pre-1.0.0 behvaiour, see https://github.com/joelittlejohn/jsonschema2pojo/commit/1590df3#diff-963e2b7
    @Override
    org.jsonschema2pojo.rules.Rule<JClassContainer, JType> getSchemaRule() {
        { nodeName, schemaNode, parent, generatableType, schema ->
            if (schemaNode.has('$ref')) {
                schema = getSchemaStore().create(schema, schemaNode.get('$ref').asText(), getGenerationConfig().getRefFragmentPathDelimiters());
                schemaNode = schema.getContent();
                if (schema.isGenerated()) {
                    return schema.getJavaType();
                }
            }
            super.getSchemaRule().apply(nodeName, schemaNode, parent, generatableType, schema)
        }
    }
}

apply plugin: 'jsonschema2pojo'

jsonSchema2Pojo {
    source = files("${sourceSets.main.output.resourcesDir}/schemas/v201/json")
    targetPackage = "com.evbox.everon.ocpp.v201.message"
}

dependencies {
    api project(':payload:ocpp-data-types')
    api "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
}
