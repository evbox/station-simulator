import com.fasterxml.jackson.databind.JsonNode
import com.sun.codemodel.JClassContainer
import com.sun.codemodel.JType
import org.jsonschema2pojo.gradle.JsonSchemaPlugin
import org.jsonschema2pojo.rules.RuleFactory

// In case you want to update a new version of this package, uncomment the commented lines, and comment the same ones
// in the simulator-core gradle file

//buildscript {
//    repositories {
//        jcenter()
//    }
//    dependencies {
//        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
//    }
//}

plugins {
//    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
}

apply plugin: 'java'
sourceCompatibility = 11
targetCompatibility = 11

plugins.withType(JsonSchemaPlugin).whenPluginAdded {
    jsonSchema2Pojo {
        generateBuilders = true
        initializeCollections = false
        useBigDecimals = true
        includeJsr303Annotations = true
        includeHashcodeAndEquals = true
        targetVersion = sourceCompatibility
        customRuleFactory = OcppGeneratorRuleFactory.class
        dateTimeType = 'java.time.ZonedDateTime'
    }
}

class OcppGeneratorRuleFactory extends RuleFactory {
    @Override
    org.jsonschema2pojo.rules.Rule<JClassContainer, JType> getTypeRule() {
        { nodeName, node, parent, jClassContainer, schema ->
            JType type = super.getTypeRule().apply(nodeName, node, parent, jClassContainer, schema)
            JsonNode maxLength = node.get('maxLength')

            type.fullName() == (String.class.getName()) && maxLength != null ?
                    type.owner().ref('com.evbox.everon.ocpp.common.CiString.' + (nodeName.toLowerCase().endsWith('idtag') ? 'IdToken' : 'CiString' + maxLength.asInt())) :
                    type
        }
    }

    // revert to legacy pre-1.0.0 behvaiour, see https://github.com/joelittlejohn/jsonschema2pojo/commit/1590df3#diff-963e2b7
    @Override
    org.jsonschema2pojo.rules.Rule<JClassContainer, JType> getSchemaRule() {
        { nodeName, schemaNode, parent, generatableType, schema ->
            if (schemaNode.has('$ref')) {
                schema = getSchemaStore().create(schema, schemaNode.get('$ref').asText(), getGenerationConfig().getRefFragmentPathDelimiters());
                schemaNode = schema.getContent();
                if (schema.isGenerated()) {
                    return schema.getJavaType();
                }
            }
            super.getSchemaRule().apply(nodeName, schemaNode, parent, generatableType, schema)
        }
    }
}

apply plugin: 'jsonschema2pojo'

jsonSchema2Pojo {
    source = files("${sourceSets.main.output.resourcesDir}/schemas/v201/json")
    targetPackage = "com.evbox.everon.ocpp.v201.message"
}

dependencies {
    compile project(':payload:ocpp-data-types')
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
}

//apply plugin: 'com.jfrog.bintray'
//apply plugin: 'maven-publish'
//
//
//task sourcesJar(type: Jar) {
//    from sourceSets.main.java
//    archiveClassifier = 'sources'
//}
//
//task javadocJar(type: Jar) {
//    from javadoc
//    archiveClassifier = 'javadoc'
//}
//version '2.0.2'
//
//shadowJar {
//    baseName = 'ocpp-payload'
//    classifier = null
//    version = project.version
//}
//
//publishing {
//    publications {
//        shadow(MavenPublication) { publications ->
//            publications.artifact(sourcesJar)
//            publications.artifact(javadocJar)
//            publications.groupId('io.everon')
//            publications.artifactId('ocpp-payload')
//            publications.version(project.version)
//            project.shadow.component(publications)
//        }
//    }
//}
//
//bintray {
//    user = System.getenv('BINTRAY_USERNAME')
//    key = System.getenv('BINTRAY_API_KEY')
//    publications = ['shadow']
//
//    pkg {
//        repo = 'maven'
//        name = 'ocpp-payload'
//        licenses = ['MIT']
//        vcsUrl = 'https://github.com/evbox/station-simulator.git'
//        publicDownloadNumbers = true
//
//        version {
//            name = project.version
//            desc = 'OCPP 2.0 payload'
//            vcsTag = project.version
//        }
//    }
//
//    publish = true
//}
