import com.fasterxml.jackson.databind.JsonNode
import com.sun.codemodel.JClassContainer
import com.sun.codemodel.JType
import org.jsonschema2pojo.gradle.JsonSchemaPlugin
import org.jsonschema2pojo.rules.RuleFactory

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'java'
sourceCompatibility = 11
targetCompatibility = 11

plugins.withType(JsonSchemaPlugin).whenPluginAdded {
    jsonSchema2Pojo {
        generateBuilders = true
        initializeCollections = false
        useBigDecimals = true
        includeJsr303Annotations = true
        includeHashcodeAndEquals = true
        targetVersion = sourceCompatibility
        customRuleFactory = OcppGeneratorRuleFactory.class
        dateTimeType = 'java.time.ZonedDateTime'
    }
}

class OcppGeneratorRuleFactory extends RuleFactory {
    @Override
    org.jsonschema2pojo.rules.Rule<JClassContainer, JType> getTypeRule() {
        { nodeName, node, parent, jClassContainer, schema ->
            JType type = super.getTypeRule().apply(nodeName, node, parent, jClassContainer, schema)
            JsonNode maxLength = node.get('maxLength')

            type.fullName() == (String.class.getName()) && maxLength != null ?
                    type.owner().ref('com.evbox.everon.ocpp.common.CiString.' + (nodeName.toLowerCase().endsWith('idtag') ? 'IdToken' : 'CiString' + maxLength.asInt())) :
                    type
        }
    }

    // revert to legacy pre-1.0.0 behvaiour, see https://github.com/joelittlejohn/jsonschema2pojo/commit/1590df3#diff-963e2b7
    @Override
    org.jsonschema2pojo.rules.Rule<JClassContainer, JType> getSchemaRule() {
        { nodeName, schemaNode, parent, generatableType, schema ->
            if (schemaNode.has('$ref')) {
                schema = getSchemaStore().create(schema, schemaNode.get('$ref').asText(), getGenerationConfig().getRefFragmentPathDelimiters());
                schemaNode = schema.getContent();
                if (schema.isGenerated()) {
                    return schema.getJavaType();
                }
            }
            super.getSchemaRule().apply(nodeName, schemaNode, parent, generatableType, schema)
        }
    }
}

apply plugin: 'jsonschema2pojo'

jsonSchema2Pojo {
    source = files("${sourceSets.main.output.resourcesDir}/schemas/v201/json")
    targetPackage = "com.evbox.everon.ocpp.v201.message"
}

dependencies {
    api project(':payload:ocpp-data-types')
    api "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
}

apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}
version '2.1.1'

shadowJar {
    baseName = 'ocpp-payload'
    classifier = null
    version = project.version
}


publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            from project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar
            groupId 'io.everon'
            artifactId 'ocpp-payload'
            version project.version
            pom {
                name = 'ocpp-payload'
                packaging  = 'jar'
                description = 'Occp version 2.0.1 messages payload'
                url = 'https://github.com/everonhq/station-simulator'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/everonhq/station-simulator/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'Rawan-Abdelaal'
                        name = 'Rawan Abdelaal'
                        email = 'rawan.abdelaal@everon.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/everonhq/station-simulator.git'
                    developerConnection = 'scm:git:ssh://github.com:everonhq/station-simulator.git'
                    url = 'https://github.com/everonhq/station-simulator/tree/master'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty("OSSRH_USER") ?: System.getenv("OSSRH_USER") ?: 'return@configure'
                password = findProperty("OSSRH_PASSWORD") ?: System.getenv("OSSRH_PASSWORD") ?: 'return@configure'
            }
        }
    }
}

signing {
    String signingKeyId = findProperty("SIGNING_KEY_ID") ?: System.getenv('SIGNING_KEY_ID') ?: 'your-key-id'
    String signingKey = findProperty("SIGNING_KEY") ?: System.getenv('SIGNING_KEY') ?: ''
    String signingPassword = findProperty("SIGNING_PASSWORD") ?: System.getenv('SIGNING_PASSWORD') ?: ''

    useInMemoryPgpKeys(signingKeyId, new String(signingKey.decodeBase64()), new String(signingPassword.decodeBase64()))
    sign publishing.publications.mavenJava
}