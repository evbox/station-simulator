buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok'   version '2.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'jacoco'
    id 'signing'
    id 'java-library'
}

apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven-publish'

mainClassName = 'com.evbox.everon.ocpp.simulator.SimulatorLauncher'
sourceCompatibility = 11
targetCompatibility = 11

run {
    if (project.hasProperty('arguments')) {
        args(arguments.split("\\s"))
    }
    standardInput = System.in
}

lombok {
    version = "1.18.4"
    sha256 = "39f3922deb679b1852af519eb227157ef2dd0a21eec3542c8ce1b45f2df39742"
}

dependencies {

    api 'org.apache.httpcomponents:httpclient:4.5.3'
    api 'io.everon:ocpp-payload:2.1.0'

    api 'info.picocli:picocli:3.9.2'
    api 'com.squareup.okhttp3:okhttp:3.12.1'
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    api 'ch.qos.logback:logback-core:1.2.3'
    api 'ch.qos.logback:logback-classic:1.2.3'

    // BouncyCastle
    api 'org.bouncycastle:bcpkix-jdk15on:1.64'

    api 'org.apache.commons:commons-lang3:3.9'
    api "com.google.guava:guava:${guavaVersion}"

    api group: 'commons-codec', name: 'commons-codec', version: '1.12'

    testImplementation 'org.assertj:assertj-core:3.13.0'
    testImplementation 'io.undertow:undertow-core:2.0.17.Final'
    testImplementation 'org.awaitility:awaitility:3.1.5'

    testImplementation 'org.mockito:mockito-junit-jupiter:3.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junit5Version}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junit5Version}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junit5Version}")
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacoco {
    toolVersion = '0.8.5'
}
tasks['test'].finalizedBy 'jacocoTestReport'

jar {
    manifest {
        attributes(
                'Main-Class': 'com.evbox.everon.ocpp.simulator.SimulatorLauncher'
        )
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}

version '0.5.11-SNAPSHOT'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'io.everon'
            artifactId 'ocpp-station-simulator'
            version project.version
            pom {
                name = 'ocpp-station-simulator'
                packaging  = 'jar'
                description = 'The simulator tool is designed to simulate charging station. It implements OCPP protocol and talks to Charging Station Management System (CSMS) via WebSocket protocol.'
                url = 'https://github.com/everonhq/station-simulator'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/everonhq/station-simulator/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'Rawan-Abdelaal'
                        name = 'Rawan Abdelaal'
                        email = 'rawan.abdelaal@everon.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/everonhq/station-simulator.git'
                    developerConnection = 'scm:git:ssh://github.com:everonhq/station-simulator.git'
                    url = 'https://github.com/everonhq/station-simulator/tree/master'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("OSSRH_USER") ?: 'return@configure'
                password = System.getenv("OSSRH_PASSWORD") ?: 'return@configure'
            }
        }
    }
}

signing {
    String signingKeyId = System.getenv("SIGNING_KEY_ID") ?: 'your-key-id'
    String signingKey = System.getenv("SIGNING_KEY") ?: ''
    String signingPassword = System.getenv("SIGNING_PASSWORD") ?: ''

    useInMemoryPgpKeys(signingKeyId, new String(signingKey.decodeBase64()), new String(signingPassword.decodeBase64()))
    sign publishing.publications.mavenJava
}
