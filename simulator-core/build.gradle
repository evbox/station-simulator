buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok'   version '2.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'jacoco'
    id 'signing'
    id 'java-library'
}

apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven-publish'

mainClassName = 'com.evbox.everon.ocpp.simulator.SimulatorLauncher'
sourceCompatibility = 11
targetCompatibility = 11

run {
    if (project.hasProperty('arguments')) {
        args(arguments.split("\\s"))
    }
    standardInput = System.in
}

dependencies {

    api 'org.apache.httpcomponents:httpclient:4.5.13'
    api 'io.everon:ocpp-payload:2.1.1'

    api 'info.picocli:picocli:4.6.3'
    api 'com.squareup.okhttp3:okhttp:4.10.0'
    api 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
    api 'ch.qos.logback:logback-core:1.2.11'
    api 'ch.qos.logback:logback-classic:1.2.11'

    // BouncyCastle
    api 'org.bouncycastle:bcpkix-jdk15on:1.70'

    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'com.google.guava:guava:31.1-jre'

    api group: 'commons-codec', name: 'commons-codec', version: '1.12'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'io.undertow:undertow-core:2.2.17.Final'
    testImplementation 'org.awaitility:awaitility:4.2.0'

    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacoco {
    toolVersion = '0.8.8'
}
tasks['test'].finalizedBy 'jacocoTestReport'

jar {
    manifest {
        attributes(
                'Main-Class': 'com.evbox.everon.ocpp.simulator.SimulatorLauncher'
        )
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}

version '0.5.15'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'io.everon'
            artifactId 'ocpp-station-simulator'
            version project.version
            pom {
                name = 'ocpp-station-simulator'
                packaging  = 'jar'
                description = 'The simulator tool is designed to simulate charging station. It implements OCPP protocol and talks to Charging Station Management System (CSMS) via WebSocket protocol.'
                url = 'https://github.com/everonhq/station-simulator'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/everonhq/station-simulator/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'Rawan-Abdelaal'
                        name = 'Rawan Abdelaal'
                        email = 'rawan.abdelaal@everon.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/everonhq/station-simulator.git'
                    developerConnection = 'scm:git:ssh://github.com:everonhq/station-simulator.git'
                    url = 'https://github.com/everonhq/station-simulator/tree/master'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = 'maven'
            credentials {
                username = findProperty("OSSRH_USER") ?: System.getenv("OSSRH_USER") ?: 'return@configure'
                password = findProperty("OSSRH_PASSWORD") ?: System.getenv("OSSRH_PASSWORD") ?: 'return@configure'
            }
        }
    }
}

signing {
    String signingKeyId = findProperty("SIGNING_KEY_ID") ?: System.getenv('SIGNING_KEY_ID') ?: 'your-key-id'
    String signingKey = findProperty("SIGNING_KEY") ?: System.getenv('SIGNING_KEY') ?: ''
    String signingPassword = findProperty("SIGNING_PASSWORD") ?: System.getenv('SIGNING_PASSWORD') ?: ''

    useInMemoryPgpKeys(signingKeyId, new String(signingKey.decodeBase64()), new String(signingPassword.decodeBase64()))
    sign publishing.publications.mavenJava
}
